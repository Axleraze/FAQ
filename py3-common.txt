******************
Python 3 Conspect
******************

Common
-------

Python поддерживает динамическую типизацию, то есть тип переменной определяется только во время исполнения. Поэтому вместо «присваивания значения переменной» лучше говорить о «связывании значения с некоторым именем».
В Python имеются встроенные типы: булевый, строка, Unicode-строка, целое число произвольной точности, число с плавающей запятой, комплексное число и некоторые другие. Из коллекций в Python встроены: список, кортеж (неизменяемый список), словарь, множество и другие[26]. Все значения являются объектами, в том числе функции, методы, модули, классы. 

Начиная с Python 2.3, для использования в тексте программы символов, не входящих в ASCII, необходимо явно указывать кодировку исходного кода в начале модуля:
# -*- coding: utf-8 -*-   или   # coding: utf-8

Python cохраняет байт-код - расширения .pyc (до версии 3.5, .pyo) что позволяет интерпретатору не тратить лишнее время на перекомпиляцию кода модулей при каждом запуске. 
.py — исходный код;
.pyw — исходный код для выполнения программ с графическим интерфейсом в Windows;
.pyc — скомпилированный байт-код;
.pyo — оптимизированный скомпилированный байт-код;
.pyd — бинарный код динамических библиотек DLL (в Windows).


Итак еще раз, функции в python являются объектами, соответственно, их можно возвращать из другой функции или передавать в качестве аргумента. Так же функция в python может быть определена и внутри другой функции.

Декораторы
----------
А еще есть Декораторы — это, по сути, "обёртки", которые дают нам возможность изменить поведение функции, не изменяя её код.
Внутри себя декоратор определяет функцию-"обёртку". Она будет обёрнута вокруг декорируемой, получая возможность исполнять произвольный код до и после неё.


 функции и методы в Python — это практически одно и то же, за исключением того, что методы всегда ожидают первым параметром ссылку на сам объект (self). Это значит, что мы можем создавать декораторы для методов точно так же, как и для функций, просто не забывая про self.

Package manager
----------------

Pip - стандартный менеджер пакетов питона, позволяет устанавливать бинарные wheel сборки пакетов.  Если их нет (ни в самом Pip, ни где-то еще), Pip компилирует пакеты локально. При этом могут возникнуть проблемы при сложных зависимостях, когда требуются сторонние не питон библиотеки. В этом случае удобно использовать Conda.
Python Packaging Authority (PyPA) 

Conda - менеджер пакетов питона, позволяет устанавливать уже скомпилированные пакеты (может работать и в режиме компиляции пакетов перед установкой). Также Conda - менеджер окружений системы, позволяет создавать окружения с разными версиями чего угодно (библиотеки C, низкоуровневые библиотеки и т.д.) 
* Anaconda - более 150 предустановленных пакетов (около 3 Гб) + более 250 пакетов, готовых к установке командой conda install package_name
* Miniconda - более 400 пакетов, готовых к установке командой conda install package_name
И то и другое уже включает в себя conda, интерпретатор питона и pip.


pip
---

# pip <command> [options]

  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  list                        List installed packages.
  show                        Show information about installed packages.
  search                      Search PyPI for packages.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion
  help                        Show help for commands.


## Поиск по pypy репозиториям, например пакета связанного с youtube
pip3 search youtube

## Список установленных пакетов (можно грепать)
pip3 list

## Список пакеток которые установленные и доступные
pip3 list -o (или же --outdated)

##  Информация по пакету
pip3 show <pkg_name>

## Проверка установленных зависимостей для пакета
pip3 check



Виртуальное окружение.
---------------------

##  Создаем новое виртуальное окружение
virtualenv venv

## Активируем его, результат будет видны скобочки и (venv)
source venv/bin/activate

## Посмотреть что установлено в это виртуаленваерменте
pip freeze

## Сохранить установленные вирт.енв. пакеты в файле (обычно requirments.txt)
pip freeze > requirments.txt

## Установит ьпакета в новый виртенв с уже имеющегося файла с рекваерментами
pip install -r requirments.txt